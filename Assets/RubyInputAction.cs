//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/RubyInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RubyInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RubyInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RubyInputAction"",
    ""maps"": [
        {
            ""name"": ""Ruby"",
            ""id"": ""6bca999c-8027-4eec-9088-10726daf26c9"",
            ""actions"": [
                {
                    ""name"": ""Movenment"",
                    ""type"": ""Value"",
                    ""id"": ""0133dae4-2426-42e3-9942-d017b3edb413"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""65274489-57d7-45a7-b17b-6090097265f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""257566b2-daef-4853-b362-acf024e3659f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""e9018cba-472d-42fc-bb55-2c9cb8294972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""108e70ed-aa56-40da-8fd2-49898d598dee"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b452362b-faf6-47fe-aef7-ede7d8245367"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4eb1a617-7357-431f-9358-92c2d6bb40fa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51c0b994-ccd0-4050-ac3d-03930b032d05"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc255746-19b5-4383-a9ab-210b715a8cd0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""affe17dd-8137-4260-9efa-d610cb7c4ff0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movenment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a009cf94-46c8-4f18-a41c-7dc7cd3d848e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22a55cc0-05bd-469a-abc0-84bc9ebb7288"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edacd562-4bec-46d4-ada9-66932ce716b0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ruby
        m_Ruby = asset.FindActionMap("Ruby", throwIfNotFound: true);
        m_Ruby_Movenment = m_Ruby.FindAction("Movenment", throwIfNotFound: true);
        m_Ruby_Launch = m_Ruby.FindAction("Launch", throwIfNotFound: true);
        m_Ruby_Talk = m_Ruby.FindAction("Talk", throwIfNotFound: true);
        m_Ruby_PauseGame = m_Ruby.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ruby
    private readonly InputActionMap m_Ruby;
    private IRubyActions m_RubyActionsCallbackInterface;
    private readonly InputAction m_Ruby_Movenment;
    private readonly InputAction m_Ruby_Launch;
    private readonly InputAction m_Ruby_Talk;
    private readonly InputAction m_Ruby_PauseGame;
    public struct RubyActions
    {
        private @RubyInputAction m_Wrapper;
        public RubyActions(@RubyInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movenment => m_Wrapper.m_Ruby_Movenment;
        public InputAction @Launch => m_Wrapper.m_Ruby_Launch;
        public InputAction @Talk => m_Wrapper.m_Ruby_Talk;
        public InputAction @PauseGame => m_Wrapper.m_Ruby_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Ruby; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RubyActions set) { return set.Get(); }
        public void SetCallbacks(IRubyActions instance)
        {
            if (m_Wrapper.m_RubyActionsCallbackInterface != null)
            {
                @Movenment.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovenment;
                @Movenment.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovenment;
                @Movenment.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnMovenment;
                @Launch.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnLaunch;
                @Talk.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
                @Talk.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
                @Talk.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnTalk;
                @PauseGame.started -= m_Wrapper.m_RubyActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_RubyActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_RubyActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_RubyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movenment.started += instance.OnMovenment;
                @Movenment.performed += instance.OnMovenment;
                @Movenment.canceled += instance.OnMovenment;
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
                @Talk.started += instance.OnTalk;
                @Talk.performed += instance.OnTalk;
                @Talk.canceled += instance.OnTalk;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public RubyActions @Ruby => new RubyActions(this);
    public interface IRubyActions
    {
        void OnMovenment(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnTalk(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
